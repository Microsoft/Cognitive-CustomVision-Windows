// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Cognitive.CustomVision.Prediction
{
    using Microsoft.Rest;
    using Models;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for PredictionEndpoint.
    /// </summary>
    public static partial class PredictionEndpointExtensions
    {
            /// <summary>
            /// PredictImage
            /// </summary>
            /// <remarks>
            /// Predict an image and saves the result
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectId'>
            /// Format - uuid. The project id
            /// </param>
            /// <param name='imageData'>
            /// </param>
            /// <param name='iterationId'>
            /// Format - uuid. Optional. Specifies the id of a particular iteration to
            /// evaluate against.
            /// The default iteration for the project will be used when not specified
            /// </param>
            /// <param name='application'>
            /// Optional. Specifies the name of application using the endpoint
            /// </param>
            public static ImagePredictionResultModel FiveaThreeZeroFourFourfSixZeroEightfaFiveeZeroSixbEightNineZerofOneSixFour(this IPredictionEndpoint operations, string projectId, string imageData, string iterationId = default(string), string application = default(string))
            {
                return operations.FiveaThreeZeroFourFourfSixZeroEightfaFiveeZeroSixbEightNineZerofOneSixFourAsync(projectId, imageData, iterationId, application).GetAwaiter().GetResult();
            }

            /// <summary>
            /// PredictImage
            /// </summary>
            /// <remarks>
            /// Predict an image and saves the result
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectId'>
            /// Format - uuid. The project id
            /// </param>
            /// <param name='imageData'>
            /// </param>
            /// <param name='iterationId'>
            /// Format - uuid. Optional. Specifies the id of a particular iteration to
            /// evaluate against.
            /// The default iteration for the project will be used when not specified
            /// </param>
            /// <param name='application'>
            /// Optional. Specifies the name of application using the endpoint
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ImagePredictionResultModel> FiveaThreeZeroFourFourfSixZeroEightfaFiveeZeroSixbEightNineZerofOneSixFourAsync(this IPredictionEndpoint operations, string projectId, string imageData, string iterationId = default(string), string application = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.FiveaThreeZeroFourFourfSixZeroEightfaFiveeZeroSixbEightNineZerofOneSixFourWithHttpMessagesAsync(projectId, imageData, iterationId, application, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// PredictImage
            /// </summary>
            /// <remarks>
            /// Predict an image and saves the result
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectId'>
            /// Format - uuid. The project id
            /// </param>
            /// <param name='imageData'>
            /// </param>
            /// <param name='iterationId'>
            /// Format - uuid. Optional. Specifies the id of a particular iteration to
            /// evaluate against.
            /// The default iteration for the project will be used when not specified
            /// </param>
            /// <param name='application'>
            /// Optional. Specifies the name of application using the endpoint
            /// </param>
            /// <param name='customHeaders'>
            /// Headers that will be added to request.
            /// </param>
            public static HttpOperationResponse<ImagePredictionResultModel> FiveaThreeZeroFourFourfSixZeroEightfaFiveeZeroSixbEightNineZerofOneSixFourWithHttpMessages(this IPredictionEndpoint operations, string projectId, string imageData, string iterationId = default(string), string application = default(string), Dictionary<string, List<string>> customHeaders = null)
            {
                return operations.FiveaThreeZeroFourFourfSixZeroEightfaFiveeZeroSixbEightNineZerofOneSixFourWithHttpMessagesAsync(projectId, imageData, iterationId, application, customHeaders, CancellationToken.None).ConfigureAwait(false).GetAwaiter().GetResult();
            }

            /// <summary>
            /// PredictImageUrl
            /// </summary>
            /// <remarks>
            /// Predict an image url and saves the result
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectId'>
            /// Format - uuid. The project id
            /// </param>
            /// <param name='iterationId'>
            /// Format - uuid. Optional. Specifies the id of a particular iteration to
            /// evaluate against.
            /// The default iteration for the project will be used when not specified
            /// </param>
            /// <param name='application'>
            /// Optional. Specifies the name of application using the endpoint
            /// </param>
            /// <param name='imageUrl'>
            /// An {Iris.Web.Api.Models.ImageUrl} that contains the url of the image to be
            /// evaluated
            /// </param>
            public static ImagePredictionResultModel FiveaThreeZeroFourFourfSixZeroEightfaFiveeZeroSixbEightNineZerofOneSixThree(this IPredictionEndpoint operations, string projectId, string iterationId = default(string), string application = default(string), ImageUrl imageUrl = default(ImageUrl))
            {
                return operations.FiveaThreeZeroFourFourfSixZeroEightfaFiveeZeroSixbEightNineZerofOneSixThreeAsync(projectId, iterationId, application, imageUrl).GetAwaiter().GetResult();
            }

            /// <summary>
            /// PredictImageUrl
            /// </summary>
            /// <remarks>
            /// Predict an image url and saves the result
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectId'>
            /// Format - uuid. The project id
            /// </param>
            /// <param name='iterationId'>
            /// Format - uuid. Optional. Specifies the id of a particular iteration to
            /// evaluate against.
            /// The default iteration for the project will be used when not specified
            /// </param>
            /// <param name='application'>
            /// Optional. Specifies the name of application using the endpoint
            /// </param>
            /// <param name='imageUrl'>
            /// An {Iris.Web.Api.Models.ImageUrl} that contains the url of the image to be
            /// evaluated
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ImagePredictionResultModel> FiveaThreeZeroFourFourfSixZeroEightfaFiveeZeroSixbEightNineZerofOneSixThreeAsync(this IPredictionEndpoint operations, string projectId, string iterationId = default(string), string application = default(string), ImageUrl imageUrl = default(ImageUrl), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.FiveaThreeZeroFourFourfSixZeroEightfaFiveeZeroSixbEightNineZerofOneSixThreeWithHttpMessagesAsync(projectId, iterationId, application, imageUrl, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// PredictImageUrl
            /// </summary>
            /// <remarks>
            /// Predict an image url and saves the result
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectId'>
            /// Format - uuid. The project id
            /// </param>
            /// <param name='iterationId'>
            /// Format - uuid. Optional. Specifies the id of a particular iteration to
            /// evaluate against.
            /// The default iteration for the project will be used when not specified
            /// </param>
            /// <param name='application'>
            /// Optional. Specifies the name of application using the endpoint
            /// </param>
            /// <param name='imageUrl'>
            /// An {Iris.Web.Api.Models.ImageUrl} that contains the url of the image to be
            /// evaluated
            /// </param>
            /// <param name='customHeaders'>
            /// Headers that will be added to request.
            /// </param>
            public static HttpOperationResponse<ImagePredictionResultModel> FiveaThreeZeroFourFourfSixZeroEightfaFiveeZeroSixbEightNineZerofOneSixThreeWithHttpMessages(this IPredictionEndpoint operations, string projectId, string iterationId = default(string), string application = default(string), ImageUrl imageUrl = default(ImageUrl), Dictionary<string, List<string>> customHeaders = null)
            {
                return operations.FiveaThreeZeroFourFourfSixZeroEightfaFiveeZeroSixbEightNineZerofOneSixThreeWithHttpMessagesAsync(projectId, iterationId, application, imageUrl, customHeaders, CancellationToken.None).ConfigureAwait(false).GetAwaiter().GetResult();
            }

            /// <summary>
            /// PredictImageUrlWithNoStore
            /// </summary>
            /// <remarks>
            /// Predict an image url without saving the result
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectId'>
            /// Format - uuid. The project id
            /// </param>
            /// <param name='iterationId'>
            /// Format - uuid. Optional. Specifies the id of a particular iteration to
            /// evaluate against.
            /// The default iteration for the project will be used when not specified
            /// </param>
            /// <param name='application'>
            /// Optional. Specifies the name of application using the endpoint
            /// </param>
            /// <param name='imageUrl'>
            /// An {Iris.Web.Api.Models.ImageUrl} that contains the url of the image to be
            /// evaluated
            /// </param>
            public static ImagePredictionResultModel FiveaThreeZeroFourFourfSixZeroEightfaFiveeZeroSixbEightNineZerofOneSixFive(this IPredictionEndpoint operations, string projectId, string iterationId = default(string), string application = default(string), ImageUrl imageUrl = default(ImageUrl))
            {
                return operations.FiveaThreeZeroFourFourfSixZeroEightfaFiveeZeroSixbEightNineZerofOneSixFiveAsync(projectId, iterationId, application, imageUrl).GetAwaiter().GetResult();
            }

            /// <summary>
            /// PredictImageUrlWithNoStore
            /// </summary>
            /// <remarks>
            /// Predict an image url without saving the result
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectId'>
            /// Format - uuid. The project id
            /// </param>
            /// <param name='iterationId'>
            /// Format - uuid. Optional. Specifies the id of a particular iteration to
            /// evaluate against.
            /// The default iteration for the project will be used when not specified
            /// </param>
            /// <param name='application'>
            /// Optional. Specifies the name of application using the endpoint
            /// </param>
            /// <param name='imageUrl'>
            /// An {Iris.Web.Api.Models.ImageUrl} that contains the url of the image to be
            /// evaluated
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ImagePredictionResultModel> FiveaThreeZeroFourFourfSixZeroEightfaFiveeZeroSixbEightNineZerofOneSixFiveAsync(this IPredictionEndpoint operations, string projectId, string iterationId = default(string), string application = default(string), ImageUrl imageUrl = default(ImageUrl), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.FiveaThreeZeroFourFourfSixZeroEightfaFiveeZeroSixbEightNineZerofOneSixFiveWithHttpMessagesAsync(projectId, iterationId, application, imageUrl, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// PredictImageUrlWithNoStore
            /// </summary>
            /// <remarks>
            /// Predict an image url without saving the result
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectId'>
            /// Format - uuid. The project id
            /// </param>
            /// <param name='iterationId'>
            /// Format - uuid. Optional. Specifies the id of a particular iteration to
            /// evaluate against.
            /// The default iteration for the project will be used when not specified
            /// </param>
            /// <param name='application'>
            /// Optional. Specifies the name of application using the endpoint
            /// </param>
            /// <param name='imageUrl'>
            /// An {Iris.Web.Api.Models.ImageUrl} that contains the url of the image to be
            /// evaluated
            /// </param>
            /// <param name='customHeaders'>
            /// Headers that will be added to request.
            /// </param>
            public static HttpOperationResponse<ImagePredictionResultModel> FiveaThreeZeroFourFourfSixZeroEightfaFiveeZeroSixbEightNineZerofOneSixFiveWithHttpMessages(this IPredictionEndpoint operations, string projectId, string iterationId = default(string), string application = default(string), ImageUrl imageUrl = default(ImageUrl), Dictionary<string, List<string>> customHeaders = null)
            {
                return operations.FiveaThreeZeroFourFourfSixZeroEightfaFiveeZeroSixbEightNineZerofOneSixFiveWithHttpMessagesAsync(projectId, iterationId, application, imageUrl, customHeaders, CancellationToken.None).ConfigureAwait(false).GetAwaiter().GetResult();
            }

            /// <summary>
            /// PredictImageWithNoStore
            /// </summary>
            /// <remarks>
            /// Predict an image without saving the result
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectId'>
            /// Format - uuid. The project id
            /// </param>
            /// <param name='imageData'>
            /// </param>
            /// <param name='iterationId'>
            /// Format - uuid. Optional. Specifies the id of a particular iteration to
            /// evaluate against.
            /// The default iteration for the project will be used when not specified
            /// </param>
            /// <param name='application'>
            /// Optional. Specifies the name of application using the endpoint
            /// </param>
            public static ImagePredictionResultModel FiveaThreeZeroFourFourfSixZeroEightfaFiveeZeroSixbEightNineZerofOneSixSix(this IPredictionEndpoint operations, string projectId, string imageData, string iterationId = default(string), string application = default(string))
            {
                return operations.FiveaThreeZeroFourFourfSixZeroEightfaFiveeZeroSixbEightNineZerofOneSixSixAsync(projectId, imageData, iterationId, application).GetAwaiter().GetResult();
            }

            /// <summary>
            /// PredictImageWithNoStore
            /// </summary>
            /// <remarks>
            /// Predict an image without saving the result
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectId'>
            /// Format - uuid. The project id
            /// </param>
            /// <param name='imageData'>
            /// </param>
            /// <param name='iterationId'>
            /// Format - uuid. Optional. Specifies the id of a particular iteration to
            /// evaluate against.
            /// The default iteration for the project will be used when not specified
            /// </param>
            /// <param name='application'>
            /// Optional. Specifies the name of application using the endpoint
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ImagePredictionResultModel> FiveaThreeZeroFourFourfSixZeroEightfaFiveeZeroSixbEightNineZerofOneSixSixAsync(this IPredictionEndpoint operations, string projectId, string imageData, string iterationId = default(string), string application = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.FiveaThreeZeroFourFourfSixZeroEightfaFiveeZeroSixbEightNineZerofOneSixSixWithHttpMessagesAsync(projectId, imageData, iterationId, application, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// PredictImageWithNoStore
            /// </summary>
            /// <remarks>
            /// Predict an image without saving the result
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectId'>
            /// Format - uuid. The project id
            /// </param>
            /// <param name='imageData'>
            /// </param>
            /// <param name='iterationId'>
            /// Format - uuid. Optional. Specifies the id of a particular iteration to
            /// evaluate against.
            /// The default iteration for the project will be used when not specified
            /// </param>
            /// <param name='application'>
            /// Optional. Specifies the name of application using the endpoint
            /// </param>
            /// <param name='customHeaders'>
            /// Headers that will be added to request.
            /// </param>
            public static HttpOperationResponse<ImagePredictionResultModel> FiveaThreeZeroFourFourfSixZeroEightfaFiveeZeroSixbEightNineZerofOneSixSixWithHttpMessages(this IPredictionEndpoint operations, string projectId, string imageData, string iterationId = default(string), string application = default(string), Dictionary<string, List<string>> customHeaders = null)
            {
                return operations.FiveaThreeZeroFourFourfSixZeroEightfaFiveeZeroSixbEightNineZerofOneSixSixWithHttpMessagesAsync(projectId, imageData, iterationId, application, customHeaders, CancellationToken.None).ConfigureAwait(false).GetAwaiter().GetResult();
            }

    }
}
