// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Cognitive.CustomVision.Training
{
    using Microsoft.Rest;
    using Models;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// </summary>
    public partial interface ITrainingApi : System.IDisposable
    {
        /// <summary>
        /// The base URI of the service.
        /// </summary>
        System.Uri BaseUri { get; set; }

        /// <summary>
        /// Gets or sets json serialization settings.
        /// </summary>
        JsonSerializerSettings SerializationSettings { get; }

        /// <summary>
        /// Gets or sets json deserialization settings.
        /// </summary>
        JsonSerializerSettings DeserializationSettings { get; }

        /// <summary>
        /// Subscription credentials which uniquely identify client
        /// subscription.
        /// </summary>
        ServiceClientCredentials Credentials { get; }


        /// <summary>
        /// CreateImagesFromData
        /// </summary>
        /// <remarks>
        /// This API accepts body content as multipart/form-data and
        /// application/octet-stream. When using multipart
        /// multiple image files can be sent at once, with a maximum of 64
        /// files
        /// </remarks>
        /// <param name='projectId'>
        /// Format - uuid. The project id
        /// </param>
        /// <param name='imageData'>
        /// </param>
        /// <param name='tagIds'>
        /// The tags ids with which to tag each image. Limited to 20
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ImageCreateSummary>> FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneOnefWithHttpMessagesAsync(string projectId, string imageData, string tagIds = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// DeleteImages
        /// </summary>
        /// <remarks>
        /// Delete images from the set of training images
        /// </remarks>
        /// <param name='projectId'>
        /// Format - uuid. The project id
        /// </param>
        /// <param name='imageIds'>
        /// Ids of the images to be deleted. Limted to 256 images per batch
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneTwoZeroWithHttpMessagesAsync(string projectId, string imageIds, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// CreateImagesFromFiles
        /// </summary>
        /// <remarks>
        /// Add the provided batch of images to the set of training images
        /// </remarks>
        /// <param name='projectId'>
        /// Format - uuid. The project id
        /// </param>
        /// <param name='imageFileCreateBatch'>
        /// The batch of image files to add. Limited to 64 images and 20 tags
        /// per batch
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ImageCreateSummary>> FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneTwoOneWithHttpMessagesAsync(string projectId, ImageFileCreateBatch imageFileCreateBatch = default(ImageFileCreateBatch), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// CreateImagesFromPredictions
        /// </summary>
        /// <remarks>
        /// Add the specified predicted images to the set of training images
        /// </remarks>
        /// <param name='projectId'>
        /// Format - uuid. The project id
        /// </param>
        /// <param name='imageIdCreateBatch'>
        /// Image and tag ids. Limted to 64 images and 20 tags per batch
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ImageCreateSummary>> FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneTwoThreeWithHttpMessagesAsync(string projectId, ImageIdCreateBatch imageIdCreateBatch = default(ImageIdCreateBatch), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// CreateImagesFromUrls
        /// </summary>
        /// <remarks>
        /// Add the provided images urls to the set of training images
        /// </remarks>
        /// <param name='projectId'>
        /// Format - uuid. The project id
        /// </param>
        /// <param name='imageUrlCreateBatch'>
        /// Image urls and tag ids. Limited to 64 images and 20 tags per batch
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ImageCreateSummary>> FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneTwoTwoWithHttpMessagesAsync(string projectId, ImageUrlCreateBatch imageUrlCreateBatch = default(ImageUrlCreateBatch), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// CreateProject
        /// </summary>
        /// <remarks>
        /// Create a project
        /// </remarks>
        /// <param name='name'>
        /// Name of the project
        /// </param>
        /// <param name='description'>
        /// The description of the project
        /// </param>
        /// <param name='domainId'>
        /// Format - uuid. The id of the domain to use for this project.
        /// Defaults to General
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Project>> FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneTwodWithHttpMessagesAsync(string name, string description = default(string), string domainId = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// GetProjects
        /// </summary>
        /// <remarks>
        /// Get your projects
        /// </remarks>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<Project>>> FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneTwocWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// CreateTag
        /// </summary>
        /// <remarks>
        /// Create a tag for the project
        /// </remarks>
        /// <param name='projectId'>
        /// Format - uuid. The project id
        /// </param>
        /// <param name='name'>
        /// The tag name
        /// </param>
        /// <param name='description'>
        /// Optional description for the tag
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Tag>> FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneThreeaWithHttpMessagesAsync(string projectId, string name, string description = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// GetTags
        /// </summary>
        /// <remarks>
        /// Get the tags for a given project and iteration
        /// </remarks>
        /// <param name='projectId'>
        /// Format - uuid. The project id
        /// </param>
        /// <param name='iterationId'>
        /// Format - uuid. The iteration id. Defaults to workspace
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<TagList>> FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneThreeNineWithHttpMessagesAsync(string projectId, string iterationId = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// DeleteImageTags
        /// </summary>
        /// <remarks>
        /// Remove a set of tags from a set of images
        /// </remarks>
        /// <param name='projectId'>
        /// Format - uuid. The project id
        /// </param>
        /// <param name='imageIds'>
        /// Image ids. Limited to 64 images
        /// </param>
        /// <param name='tagIds'>
        /// Tags to be deleted from the specified images. Limted to 20 tags
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneTwoFiveWithHttpMessagesAsync(string projectId, string imageIds, string tagIds, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// PostImageTags
        /// </summary>
        /// <remarks>
        /// Associate a set of images with a set of tags
        /// </remarks>
        /// <param name='projectId'>
        /// Format - uuid. The project id
        /// </param>
        /// <param name='imageTagCreateBatch'>
        /// Batch of image tags. Limited to 128 tags per batch
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ImageTagCreateSummary>> FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneTwoFourWithHttpMessagesAsync(string projectId, ImageTagCreateBatch imageTagCreateBatch = default(ImageTagCreateBatch), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// DeleteIteration
        /// </summary>
        /// <remarks>
        /// Delete a specific iteration of a project
        /// </remarks>
        /// <param name='projectId'>
        /// Format - uuid. The project id
        /// </param>
        /// <param name='iterationId'>
        /// Format - uuid. The iteration id
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneThreeFourWithHttpMessagesAsync(string projectId, string iterationId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// GetIteration
        /// </summary>
        /// <remarks>
        /// Get a specific iteration
        /// </remarks>
        /// <param name='projectId'>
        /// Format - uuid. The id of the project the iteration belongs to
        /// </param>
        /// <param name='iterationId'>
        /// Format - uuid. The id of the iteration to get
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iteration>> FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneThreeThreeWithHttpMessagesAsync(string projectId, string iterationId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// UpdateIteration
        /// </summary>
        /// <remarks>
        /// Update a specific iteration
        /// </remarks>
        /// <param name='projectId'>
        /// Format - uuid. Project id
        /// </param>
        /// <param name='iterationId'>
        /// Format - uuid. Iteration id
        /// </param>
        /// <param name='iteration'>
        /// The updated iteration model
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iteration>> FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneThreeFiveWithHttpMessagesAsync(string projectId, string iterationId, Iteration iteration = default(Iteration), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// DeletePrediction
        /// </summary>
        /// <remarks>
        /// Delete a set of predicted images and their associated prediction
        /// results
        /// </remarks>
        /// <param name='projectId'>
        /// Format - uuid. The project id
        /// </param>
        /// <param name='ids'>
        /// The prediction ids. Limited to 64
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneTwoNineWithHttpMessagesAsync(string projectId, string ids, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// DeleteProject
        /// </summary>
        /// <remarks>
        /// Delete a specific project
        /// </remarks>
        /// <param name='projectId'>
        /// Format - uuid. The project id
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneTwofWithHttpMessagesAsync(string projectId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// GetProject
        /// </summary>
        /// <remarks>
        /// Get a specific project
        /// </remarks>
        /// <param name='projectId'>
        /// Format - uuid. The id of the project to get
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Project>> FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneTwoeWithHttpMessagesAsync(string projectId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// UpdateProject
        /// </summary>
        /// <remarks>
        /// Update a specific project
        /// </remarks>
        /// <param name='projectId'>
        /// Format - uuid. The id of the project to update
        /// </param>
        /// <param name='project'>
        /// The updated project model
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Project>> FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneThreeZeroWithHttpMessagesAsync(string projectId, Project project = default(Project), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// DeleteTag
        /// </summary>
        /// <remarks>
        /// Delete a tag from the project
        /// </remarks>
        /// <param name='projectId'>
        /// Format - uuid. The project id
        /// </param>
        /// <param name='tagId'>
        /// Format - uuid. Id of the tag to be deleted
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneThreecWithHttpMessagesAsync(string projectId, string tagId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// GetTag
        /// </summary>
        /// <remarks>
        /// Get information about a specific tag
        /// </remarks>
        /// <param name='projectId'>
        /// Format - uuid. The project this tag belongs to
        /// </param>
        /// <param name='tagId'>
        /// Format - uuid. The tag id
        /// </param>
        /// <param name='iterationId'>
        /// Format - uuid. The iteration to retrieve this tag from. Optional,
        /// defaults to current training set
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Tag>> FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneThreebWithHttpMessagesAsync(string projectId, string tagId, string iterationId = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// UpdateTag
        /// </summary>
        /// <remarks>
        /// Update a tag
        /// </remarks>
        /// <param name='projectId'>
        /// Format - uuid. The project id
        /// </param>
        /// <param name='tagId'>
        /// Format - uuid. The id of the target tag
        /// </param>
        /// <param name='tag'>
        /// The updated tag model
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Tag>> FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneThreedWithHttpMessagesAsync(string projectId, string tagId, Tag tag = default(Tag), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// ExportIteration
        /// </summary>
        /// <remarks>
        /// Export a trained iteration
        /// </remarks>
        /// <param name='projectId'>
        /// Format - uuid. The project id
        /// </param>
        /// <param name='iterationId'>
        /// Format - uuid. The iteration id
        /// </param>
        /// <param name='platform'>
        /// The target platform (coreml or tensorflow)
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Export>> FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneThreeEightWithHttpMessagesAsync(string projectId, string iterationId, string platform, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// GetExports
        /// </summary>
        /// <remarks>
        /// Get the list of exports for a specific iteration
        /// </remarks>
        /// <param name='projectId'>
        /// Format - uuid. The project id
        /// </param>
        /// <param name='iterationId'>
        /// Format - uuid. The iteration id
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<Export>>> FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneThreeSevenWithHttpMessagesAsync(string projectId, string iterationId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// GetAccountInfo
        /// </summary>
        /// <remarks>
        /// Get basic information about your account
        /// </remarks>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Account>> FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneOneaWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// GetDomain
        /// </summary>
        /// <remarks>
        /// Get information about a specific domain
        /// </remarks>
        /// <param name='domainId'>
        /// Format - uuid. The id of the domain to get information about
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Domain>> FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneOnecWithHttpMessagesAsync(string domainId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// GetDomains
        /// </summary>
        /// <remarks>
        /// Get a list of the available domains
        /// </remarks>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<Domain>>> FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneOnebWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// GetIterationPerformance
        /// </summary>
        /// <remarks>
        /// Get detailed performance information about a trained iteration
        /// </remarks>
        /// <param name='projectId'>
        /// Format - uuid. The project id
        /// </param>
        /// <param name='iterationId'>
        /// Format - uuid. The id of the trained iteration
        /// </param>
        /// <param name='threshold'>
        /// Format - float. The 0 to 1 threshold to determine positive
        /// prediction
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IterationPerformance>> FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneThreeSixWithHttpMessagesAsync(string projectId, string iterationId, double threshold, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// GetIterations
        /// </summary>
        /// <remarks>
        /// Get iterations for the project
        /// </remarks>
        /// <param name='projectId'>
        /// Format - uuid. The project id
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<Iteration>>> FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneThreeTwoWithHttpMessagesAsync(string projectId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// GetTaggedImages
        /// </summary>
        /// <remarks>
        /// This API supports batching and range selection. By default it will
        /// only return first 50 images matching images.
        /// Use the {take} and {skip} parameters to control how many images to
        /// return in a given batch.
        /// The filtering is on an and/or relationship. For example, if the
        /// provided tag ids are for the "Dog" and
        /// "Cat" tags, then only images tagged with Dog and/or Cat will be
        /// returned
        /// </remarks>
        /// <param name='projectId'>
        /// Format - uuid. The project id
        /// </param>
        /// <param name='iterationId'>
        /// Format - uuid. The iteration id. Defaults to workspace
        /// </param>
        /// <param name='tagIds'>
        /// An list of tags ids to filter the images. Defaults to all tagged
        /// images when null. Limited to 20
        /// </param>
        /// <param name='orderBy'>
        /// The ordering. Defaults to newest. Possible values include:
        /// 'Newest', 'Oldest'
        /// </param>
        /// <param name='take'>
        /// Format - int32. Maximum number of images to return. Defaults to 50,
        /// limited to 256
        /// </param>
        /// <param name='skip'>
        /// Format - int32. Number of images to skip before beginning the image
        /// batch. Defaults to 0
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<Image>>> FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneOnedWithHttpMessagesAsync(string projectId, string iterationId = default(string), string tagIds = default(string), string orderBy = default(string), int? take = 50, int? skip = 0, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// GetUntaggedImages
        /// </summary>
        /// <remarks>
        /// This API supports batching and range selection. By default it will
        /// only return first 50 images matching images.
        /// Use the {take} and {skip} parameters to control how many images to
        /// return in a given batch.
        /// </remarks>
        /// <param name='projectId'>
        /// Format - uuid. The project id
        /// </param>
        /// <param name='iterationId'>
        /// Format - uuid. The iteration id. Defaults to workspace
        /// </param>
        /// <param name='orderBy'>
        /// The ordering. Defaults to newest. Possible values include:
        /// 'Newest', 'Oldest'
        /// </param>
        /// <param name='take'>
        /// Format - int32. Maximum number of images to return. Defaults to 50,
        /// limited to 256
        /// </param>
        /// <param name='skip'>
        /// Format - int32. Number of images to skip before beginning the image
        /// batch. Defaults to 0
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<Image>>> FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneOneeWithHttpMessagesAsync(string projectId, string iterationId = default(string), string orderBy = default(string), int? take = 50, int? skip = 0, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// QueryPredictionResults
        /// </summary>
        /// <remarks>
        /// Get images that were sent to your prediction endpoint
        /// </remarks>
        /// <param name='projectId'>
        /// Format - uuid. The project id
        /// </param>
        /// <param name='predictionQueryToken'>
        /// Parameters used to query the predictions. Limited to combining 2
        /// tags
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<PredictionQuery>> FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneTwoEightWithHttpMessagesAsync(string projectId, PredictionQueryToken predictionQueryToken = default(PredictionQueryToken), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// QuickTestImage
        /// </summary>
        /// <remarks>
        /// Quick test an image
        /// </remarks>
        /// <param name='projectId'>
        /// Format - uuid. The project id
        /// </param>
        /// <param name='imageData'>
        /// </param>
        /// <param name='iterationId'>
        /// Format - uuid. Optional. Specifies the id of a particular iteration
        /// to evaluate against.
        /// The default iteration for the project will be used when not
        /// specified.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ImagePredictionResult>> FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneTwobWithHttpMessagesAsync(string projectId, string imageData, string iterationId = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// QuickTestImageUrl
        /// </summary>
        /// <remarks>
        /// Quick test an image url
        /// </remarks>
        /// <param name='projectId'>
        /// Format - uuid. The project to evaluate against
        /// </param>
        /// <param name='iterationId'>
        /// Format - uuid. Optional. Specifies the id of a particular iteration
        /// to evaluate against.
        /// The default iteration for the project will be used when not
        /// specified.
        /// </param>
        /// <param name='imageUrl'>
        /// An {Iris.Web.Api.Models.ImageUrl} that contains the url of the
        /// image to be evaluated
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ImagePredictionResult>> FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneTwoaWithHttpMessagesAsync(string projectId, string iterationId = default(string), ImageUrl imageUrl = default(ImageUrl), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// TrainProject
        /// </summary>
        /// <remarks>
        /// Queues project for training
        /// </remarks>
        /// <param name='projectId'>
        /// Format - uuid. The project id
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iteration>> FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneThreeOneWithHttpMessagesAsync(string projectId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

    }
}
