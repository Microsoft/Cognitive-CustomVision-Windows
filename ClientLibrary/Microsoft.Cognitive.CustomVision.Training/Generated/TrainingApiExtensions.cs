// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Cognitive.CustomVision.Training
{
    using Microsoft.Rest;
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for TrainingApi.
    /// </summary>
    public static partial class TrainingApiExtensions
    {
            /// <summary>
            /// CreateImagesFromData
            /// </summary>
            /// <remarks>
            /// This API accepts body content as multipart/form-data and
            /// application/octet-stream. When using multipart
            /// multiple image files can be sent at once, with a maximum of 64 files
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectId'>
            /// Format - uuid. The project id
            /// </param>
            /// <param name='imageData'>
            /// </param>
            /// <param name='tagIds'>
            /// The tags ids with which to tag each image. Limited to 20
            /// </param>
            public static ImageCreateSummary FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneOnef(this ITrainingApi operations, string projectId, string imageData, string tagIds = default(string))
            {
                return operations.FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneOnefAsync(projectId, imageData, tagIds).GetAwaiter().GetResult();
            }

            /// <summary>
            /// CreateImagesFromData
            /// </summary>
            /// <remarks>
            /// This API accepts body content as multipart/form-data and
            /// application/octet-stream. When using multipart
            /// multiple image files can be sent at once, with a maximum of 64 files
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectId'>
            /// Format - uuid. The project id
            /// </param>
            /// <param name='imageData'>
            /// </param>
            /// <param name='tagIds'>
            /// The tags ids with which to tag each image. Limited to 20
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ImageCreateSummary> FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneOnefAsync(this ITrainingApi operations, string projectId, string imageData, string tagIds = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneOnefWithHttpMessagesAsync(projectId, imageData, tagIds, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// CreateImagesFromData
            /// </summary>
            /// <remarks>
            /// This API accepts body content as multipart/form-data and
            /// application/octet-stream. When using multipart
            /// multiple image files can be sent at once, with a maximum of 64 files
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectId'>
            /// Format - uuid. The project id
            /// </param>
            /// <param name='imageData'>
            /// </param>
            /// <param name='tagIds'>
            /// The tags ids with which to tag each image. Limited to 20
            /// </param>
            /// <param name='customHeaders'>
            /// Headers that will be added to request.
            /// </param>
            public static HttpOperationResponse<ImageCreateSummary> FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneOnefWithHttpMessages(this ITrainingApi operations, string projectId, string imageData, string tagIds = default(string), Dictionary<string, List<string>> customHeaders = null)
            {
                return operations.FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneOnefWithHttpMessagesAsync(projectId, imageData, tagIds, customHeaders, CancellationToken.None).ConfigureAwait(false).GetAwaiter().GetResult();
            }

            /// <summary>
            /// DeleteImages
            /// </summary>
            /// <remarks>
            /// Delete images from the set of training images
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectId'>
            /// Format - uuid. The project id
            /// </param>
            /// <param name='imageIds'>
            /// Ids of the images to be deleted. Limted to 256 images per batch
            /// </param>
            public static void FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneTwoZero(this ITrainingApi operations, string projectId, string imageIds)
            {
                operations.FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneTwoZeroAsync(projectId, imageIds).GetAwaiter().GetResult();
            }

            /// <summary>
            /// DeleteImages
            /// </summary>
            /// <remarks>
            /// Delete images from the set of training images
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectId'>
            /// Format - uuid. The project id
            /// </param>
            /// <param name='imageIds'>
            /// Ids of the images to be deleted. Limted to 256 images per batch
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneTwoZeroAsync(this ITrainingApi operations, string projectId, string imageIds, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneTwoZeroWithHttpMessagesAsync(projectId, imageIds, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// DeleteImages
            /// </summary>
            /// <remarks>
            /// Delete images from the set of training images
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectId'>
            /// Format - uuid. The project id
            /// </param>
            /// <param name='imageIds'>
            /// Ids of the images to be deleted. Limted to 256 images per batch
            /// </param>
            /// <param name='customHeaders'>
            /// Headers that will be added to request.
            /// </param>
            public static HttpOperationResponse FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneTwoZeroWithHttpMessages(this ITrainingApi operations, string projectId, string imageIds, Dictionary<string, List<string>> customHeaders = null)
            {
                return operations.FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneTwoZeroWithHttpMessagesAsync(projectId, imageIds, customHeaders, CancellationToken.None).ConfigureAwait(false).GetAwaiter().GetResult();
            }

            /// <summary>
            /// CreateImagesFromFiles
            /// </summary>
            /// <remarks>
            /// Add the provided batch of images to the set of training images
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectId'>
            /// Format - uuid. The project id
            /// </param>
            /// <param name='imageFileCreateBatch'>
            /// The batch of image files to add. Limited to 64 images and 20 tags per batch
            /// </param>
            public static ImageCreateSummary FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneTwoOne(this ITrainingApi operations, string projectId, ImageFileCreateBatch imageFileCreateBatch = default(ImageFileCreateBatch))
            {
                return operations.FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneTwoOneAsync(projectId, imageFileCreateBatch).GetAwaiter().GetResult();
            }

            /// <summary>
            /// CreateImagesFromFiles
            /// </summary>
            /// <remarks>
            /// Add the provided batch of images to the set of training images
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectId'>
            /// Format - uuid. The project id
            /// </param>
            /// <param name='imageFileCreateBatch'>
            /// The batch of image files to add. Limited to 64 images and 20 tags per batch
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ImageCreateSummary> FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneTwoOneAsync(this ITrainingApi operations, string projectId, ImageFileCreateBatch imageFileCreateBatch = default(ImageFileCreateBatch), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneTwoOneWithHttpMessagesAsync(projectId, imageFileCreateBatch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// CreateImagesFromFiles
            /// </summary>
            /// <remarks>
            /// Add the provided batch of images to the set of training images
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectId'>
            /// Format - uuid. The project id
            /// </param>
            /// <param name='imageFileCreateBatch'>
            /// The batch of image files to add. Limited to 64 images and 20 tags per batch
            /// </param>
            /// <param name='customHeaders'>
            /// Headers that will be added to request.
            /// </param>
            public static HttpOperationResponse<ImageCreateSummary> FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneTwoOneWithHttpMessages(this ITrainingApi operations, string projectId, ImageFileCreateBatch imageFileCreateBatch = default(ImageFileCreateBatch), Dictionary<string, List<string>> customHeaders = null)
            {
                return operations.FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneTwoOneWithHttpMessagesAsync(projectId, imageFileCreateBatch, customHeaders, CancellationToken.None).ConfigureAwait(false).GetAwaiter().GetResult();
            }

            /// <summary>
            /// CreateImagesFromPredictions
            /// </summary>
            /// <remarks>
            /// Add the specified predicted images to the set of training images
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectId'>
            /// Format - uuid. The project id
            /// </param>
            /// <param name='imageIdCreateBatch'>
            /// Image and tag ids. Limted to 64 images and 20 tags per batch
            /// </param>
            public static ImageCreateSummary FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneTwoThree(this ITrainingApi operations, string projectId, ImageIdCreateBatch imageIdCreateBatch = default(ImageIdCreateBatch))
            {
                return operations.FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneTwoThreeAsync(projectId, imageIdCreateBatch).GetAwaiter().GetResult();
            }

            /// <summary>
            /// CreateImagesFromPredictions
            /// </summary>
            /// <remarks>
            /// Add the specified predicted images to the set of training images
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectId'>
            /// Format - uuid. The project id
            /// </param>
            /// <param name='imageIdCreateBatch'>
            /// Image and tag ids. Limted to 64 images and 20 tags per batch
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ImageCreateSummary> FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneTwoThreeAsync(this ITrainingApi operations, string projectId, ImageIdCreateBatch imageIdCreateBatch = default(ImageIdCreateBatch), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneTwoThreeWithHttpMessagesAsync(projectId, imageIdCreateBatch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// CreateImagesFromPredictions
            /// </summary>
            /// <remarks>
            /// Add the specified predicted images to the set of training images
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectId'>
            /// Format - uuid. The project id
            /// </param>
            /// <param name='imageIdCreateBatch'>
            /// Image and tag ids. Limted to 64 images and 20 tags per batch
            /// </param>
            /// <param name='customHeaders'>
            /// Headers that will be added to request.
            /// </param>
            public static HttpOperationResponse<ImageCreateSummary> FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneTwoThreeWithHttpMessages(this ITrainingApi operations, string projectId, ImageIdCreateBatch imageIdCreateBatch = default(ImageIdCreateBatch), Dictionary<string, List<string>> customHeaders = null)
            {
                return operations.FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneTwoThreeWithHttpMessagesAsync(projectId, imageIdCreateBatch, customHeaders, CancellationToken.None).ConfigureAwait(false).GetAwaiter().GetResult();
            }

            /// <summary>
            /// CreateImagesFromUrls
            /// </summary>
            /// <remarks>
            /// Add the provided images urls to the set of training images
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectId'>
            /// Format - uuid. The project id
            /// </param>
            /// <param name='imageUrlCreateBatch'>
            /// Image urls and tag ids. Limited to 64 images and 20 tags per batch
            /// </param>
            public static ImageCreateSummary FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneTwoTwo(this ITrainingApi operations, string projectId, ImageUrlCreateBatch imageUrlCreateBatch = default(ImageUrlCreateBatch))
            {
                return operations.FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneTwoTwoAsync(projectId, imageUrlCreateBatch).GetAwaiter().GetResult();
            }

            /// <summary>
            /// CreateImagesFromUrls
            /// </summary>
            /// <remarks>
            /// Add the provided images urls to the set of training images
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectId'>
            /// Format - uuid. The project id
            /// </param>
            /// <param name='imageUrlCreateBatch'>
            /// Image urls and tag ids. Limited to 64 images and 20 tags per batch
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ImageCreateSummary> FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneTwoTwoAsync(this ITrainingApi operations, string projectId, ImageUrlCreateBatch imageUrlCreateBatch = default(ImageUrlCreateBatch), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneTwoTwoWithHttpMessagesAsync(projectId, imageUrlCreateBatch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// CreateImagesFromUrls
            /// </summary>
            /// <remarks>
            /// Add the provided images urls to the set of training images
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectId'>
            /// Format - uuid. The project id
            /// </param>
            /// <param name='imageUrlCreateBatch'>
            /// Image urls and tag ids. Limited to 64 images and 20 tags per batch
            /// </param>
            /// <param name='customHeaders'>
            /// Headers that will be added to request.
            /// </param>
            public static HttpOperationResponse<ImageCreateSummary> FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneTwoTwoWithHttpMessages(this ITrainingApi operations, string projectId, ImageUrlCreateBatch imageUrlCreateBatch = default(ImageUrlCreateBatch), Dictionary<string, List<string>> customHeaders = null)
            {
                return operations.FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneTwoTwoWithHttpMessagesAsync(projectId, imageUrlCreateBatch, customHeaders, CancellationToken.None).ConfigureAwait(false).GetAwaiter().GetResult();
            }

            /// <summary>
            /// CreateProject
            /// </summary>
            /// <remarks>
            /// Create a project
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// Name of the project
            /// </param>
            /// <param name='description'>
            /// The description of the project
            /// </param>
            /// <param name='domainId'>
            /// Format - uuid. The id of the domain to use for this project. Defaults to
            /// General
            /// </param>
            public static Project FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneTwod(this ITrainingApi operations, string name, string description = default(string), string domainId = default(string))
            {
                return operations.FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneTwodAsync(name, description, domainId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// CreateProject
            /// </summary>
            /// <remarks>
            /// Create a project
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// Name of the project
            /// </param>
            /// <param name='description'>
            /// The description of the project
            /// </param>
            /// <param name='domainId'>
            /// Format - uuid. The id of the domain to use for this project. Defaults to
            /// General
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Project> FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneTwodAsync(this ITrainingApi operations, string name, string description = default(string), string domainId = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneTwodWithHttpMessagesAsync(name, description, domainId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// CreateProject
            /// </summary>
            /// <remarks>
            /// Create a project
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// Name of the project
            /// </param>
            /// <param name='description'>
            /// The description of the project
            /// </param>
            /// <param name='domainId'>
            /// Format - uuid. The id of the domain to use for this project. Defaults to
            /// General
            /// </param>
            /// <param name='customHeaders'>
            /// Headers that will be added to request.
            /// </param>
            public static HttpOperationResponse<Project> FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneTwodWithHttpMessages(this ITrainingApi operations, string name, string description = default(string), string domainId = default(string), Dictionary<string, List<string>> customHeaders = null)
            {
                return operations.FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneTwodWithHttpMessagesAsync(name, description, domainId, customHeaders, CancellationToken.None).ConfigureAwait(false).GetAwaiter().GetResult();
            }

            /// <summary>
            /// GetProjects
            /// </summary>
            /// <remarks>
            /// Get your projects
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<Project> FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneTwoc(this ITrainingApi operations)
            {
                return operations.FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneTwocAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// GetProjects
            /// </summary>
            /// <remarks>
            /// Get your projects
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<Project>> FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneTwocAsync(this ITrainingApi operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneTwocWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// GetProjects
            /// </summary>
            /// <remarks>
            /// Get your projects
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='customHeaders'>
            /// Headers that will be added to request.
            /// </param>
            public static HttpOperationResponse<IList<Project>> FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneTwocWithHttpMessages(this ITrainingApi operations, Dictionary<string, List<string>> customHeaders = null)
            {
                return operations.FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneTwocWithHttpMessagesAsync(customHeaders, CancellationToken.None).ConfigureAwait(false).GetAwaiter().GetResult();
            }

            /// <summary>
            /// CreateTag
            /// </summary>
            /// <remarks>
            /// Create a tag for the project
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectId'>
            /// Format - uuid. The project id
            /// </param>
            /// <param name='name'>
            /// The tag name
            /// </param>
            /// <param name='description'>
            /// Optional description for the tag
            /// </param>
            public static Tag FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneThreea(this ITrainingApi operations, string projectId, string name, string description = default(string))
            {
                return operations.FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneThreeaAsync(projectId, name, description).GetAwaiter().GetResult();
            }

            /// <summary>
            /// CreateTag
            /// </summary>
            /// <remarks>
            /// Create a tag for the project
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectId'>
            /// Format - uuid. The project id
            /// </param>
            /// <param name='name'>
            /// The tag name
            /// </param>
            /// <param name='description'>
            /// Optional description for the tag
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Tag> FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneThreeaAsync(this ITrainingApi operations, string projectId, string name, string description = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneThreeaWithHttpMessagesAsync(projectId, name, description, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// CreateTag
            /// </summary>
            /// <remarks>
            /// Create a tag for the project
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectId'>
            /// Format - uuid. The project id
            /// </param>
            /// <param name='name'>
            /// The tag name
            /// </param>
            /// <param name='description'>
            /// Optional description for the tag
            /// </param>
            /// <param name='customHeaders'>
            /// Headers that will be added to request.
            /// </param>
            public static HttpOperationResponse<Tag> FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneThreeaWithHttpMessages(this ITrainingApi operations, string projectId, string name, string description = default(string), Dictionary<string, List<string>> customHeaders = null)
            {
                return operations.FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneThreeaWithHttpMessagesAsync(projectId, name, description, customHeaders, CancellationToken.None).ConfigureAwait(false).GetAwaiter().GetResult();
            }

            /// <summary>
            /// GetTags
            /// </summary>
            /// <remarks>
            /// Get the tags for a given project and iteration
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectId'>
            /// Format - uuid. The project id
            /// </param>
            /// <param name='iterationId'>
            /// Format - uuid. The iteration id. Defaults to workspace
            /// </param>
            public static TagList FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneThreeNine(this ITrainingApi operations, string projectId, string iterationId = default(string))
            {
                return operations.FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneThreeNineAsync(projectId, iterationId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// GetTags
            /// </summary>
            /// <remarks>
            /// Get the tags for a given project and iteration
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectId'>
            /// Format - uuid. The project id
            /// </param>
            /// <param name='iterationId'>
            /// Format - uuid. The iteration id. Defaults to workspace
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<TagList> FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneThreeNineAsync(this ITrainingApi operations, string projectId, string iterationId = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneThreeNineWithHttpMessagesAsync(projectId, iterationId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// GetTags
            /// </summary>
            /// <remarks>
            /// Get the tags for a given project and iteration
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectId'>
            /// Format - uuid. The project id
            /// </param>
            /// <param name='iterationId'>
            /// Format - uuid. The iteration id. Defaults to workspace
            /// </param>
            /// <param name='customHeaders'>
            /// Headers that will be added to request.
            /// </param>
            public static HttpOperationResponse<TagList> FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneThreeNineWithHttpMessages(this ITrainingApi operations, string projectId, string iterationId = default(string), Dictionary<string, List<string>> customHeaders = null)
            {
                return operations.FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneThreeNineWithHttpMessagesAsync(projectId, iterationId, customHeaders, CancellationToken.None).ConfigureAwait(false).GetAwaiter().GetResult();
            }

            /// <summary>
            /// DeleteImageTags
            /// </summary>
            /// <remarks>
            /// Remove a set of tags from a set of images
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectId'>
            /// Format - uuid. The project id
            /// </param>
            /// <param name='imageIds'>
            /// Image ids. Limited to 64 images
            /// </param>
            /// <param name='tagIds'>
            /// Tags to be deleted from the specified images. Limted to 20 tags
            /// </param>
            public static void FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneTwoFive(this ITrainingApi operations, string projectId, string imageIds, string tagIds)
            {
                operations.FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneTwoFiveAsync(projectId, imageIds, tagIds).GetAwaiter().GetResult();
            }

            /// <summary>
            /// DeleteImageTags
            /// </summary>
            /// <remarks>
            /// Remove a set of tags from a set of images
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectId'>
            /// Format - uuid. The project id
            /// </param>
            /// <param name='imageIds'>
            /// Image ids. Limited to 64 images
            /// </param>
            /// <param name='tagIds'>
            /// Tags to be deleted from the specified images. Limted to 20 tags
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneTwoFiveAsync(this ITrainingApi operations, string projectId, string imageIds, string tagIds, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneTwoFiveWithHttpMessagesAsync(projectId, imageIds, tagIds, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// DeleteImageTags
            /// </summary>
            /// <remarks>
            /// Remove a set of tags from a set of images
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectId'>
            /// Format - uuid. The project id
            /// </param>
            /// <param name='imageIds'>
            /// Image ids. Limited to 64 images
            /// </param>
            /// <param name='tagIds'>
            /// Tags to be deleted from the specified images. Limted to 20 tags
            /// </param>
            /// <param name='customHeaders'>
            /// Headers that will be added to request.
            /// </param>
            public static HttpOperationResponse FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneTwoFiveWithHttpMessages(this ITrainingApi operations, string projectId, string imageIds, string tagIds, Dictionary<string, List<string>> customHeaders = null)
            {
                return operations.FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneTwoFiveWithHttpMessagesAsync(projectId, imageIds, tagIds, customHeaders, CancellationToken.None).ConfigureAwait(false).GetAwaiter().GetResult();
            }

            /// <summary>
            /// PostImageTags
            /// </summary>
            /// <remarks>
            /// Associate a set of images with a set of tags
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectId'>
            /// Format - uuid. The project id
            /// </param>
            /// <param name='imageTagCreateBatch'>
            /// Batch of image tags. Limited to 128 tags per batch
            /// </param>
            public static ImageTagCreateSummary FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneTwoFour(this ITrainingApi operations, string projectId, ImageTagCreateBatch imageTagCreateBatch = default(ImageTagCreateBatch))
            {
                return operations.FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneTwoFourAsync(projectId, imageTagCreateBatch).GetAwaiter().GetResult();
            }

            /// <summary>
            /// PostImageTags
            /// </summary>
            /// <remarks>
            /// Associate a set of images with a set of tags
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectId'>
            /// Format - uuid. The project id
            /// </param>
            /// <param name='imageTagCreateBatch'>
            /// Batch of image tags. Limited to 128 tags per batch
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ImageTagCreateSummary> FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneTwoFourAsync(this ITrainingApi operations, string projectId, ImageTagCreateBatch imageTagCreateBatch = default(ImageTagCreateBatch), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneTwoFourWithHttpMessagesAsync(projectId, imageTagCreateBatch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// PostImageTags
            /// </summary>
            /// <remarks>
            /// Associate a set of images with a set of tags
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectId'>
            /// Format - uuid. The project id
            /// </param>
            /// <param name='imageTagCreateBatch'>
            /// Batch of image tags. Limited to 128 tags per batch
            /// </param>
            /// <param name='customHeaders'>
            /// Headers that will be added to request.
            /// </param>
            public static HttpOperationResponse<ImageTagCreateSummary> FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneTwoFourWithHttpMessages(this ITrainingApi operations, string projectId, ImageTagCreateBatch imageTagCreateBatch = default(ImageTagCreateBatch), Dictionary<string, List<string>> customHeaders = null)
            {
                return operations.FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneTwoFourWithHttpMessagesAsync(projectId, imageTagCreateBatch, customHeaders, CancellationToken.None).ConfigureAwait(false).GetAwaiter().GetResult();
            }

            /// <summary>
            /// DeleteIteration
            /// </summary>
            /// <remarks>
            /// Delete a specific iteration of a project
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectId'>
            /// Format - uuid. The project id
            /// </param>
            /// <param name='iterationId'>
            /// Format - uuid. The iteration id
            /// </param>
            public static void FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneThreeFour(this ITrainingApi operations, string projectId, string iterationId)
            {
                operations.FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneThreeFourAsync(projectId, iterationId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// DeleteIteration
            /// </summary>
            /// <remarks>
            /// Delete a specific iteration of a project
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectId'>
            /// Format - uuid. The project id
            /// </param>
            /// <param name='iterationId'>
            /// Format - uuid. The iteration id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneThreeFourAsync(this ITrainingApi operations, string projectId, string iterationId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneThreeFourWithHttpMessagesAsync(projectId, iterationId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// DeleteIteration
            /// </summary>
            /// <remarks>
            /// Delete a specific iteration of a project
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectId'>
            /// Format - uuid. The project id
            /// </param>
            /// <param name='iterationId'>
            /// Format - uuid. The iteration id
            /// </param>
            /// <param name='customHeaders'>
            /// Headers that will be added to request.
            /// </param>
            public static HttpOperationResponse FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneThreeFourWithHttpMessages(this ITrainingApi operations, string projectId, string iterationId, Dictionary<string, List<string>> customHeaders = null)
            {
                return operations.FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneThreeFourWithHttpMessagesAsync(projectId, iterationId, customHeaders, CancellationToken.None).ConfigureAwait(false).GetAwaiter().GetResult();
            }

            /// <summary>
            /// GetIteration
            /// </summary>
            /// <remarks>
            /// Get a specific iteration
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectId'>
            /// Format - uuid. The id of the project the iteration belongs to
            /// </param>
            /// <param name='iterationId'>
            /// Format - uuid. The id of the iteration to get
            /// </param>
            public static Iteration FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneThreeThree(this ITrainingApi operations, string projectId, string iterationId)
            {
                return operations.FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneThreeThreeAsync(projectId, iterationId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// GetIteration
            /// </summary>
            /// <remarks>
            /// Get a specific iteration
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectId'>
            /// Format - uuid. The id of the project the iteration belongs to
            /// </param>
            /// <param name='iterationId'>
            /// Format - uuid. The id of the iteration to get
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iteration> FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneThreeThreeAsync(this ITrainingApi operations, string projectId, string iterationId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneThreeThreeWithHttpMessagesAsync(projectId, iterationId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// GetIteration
            /// </summary>
            /// <remarks>
            /// Get a specific iteration
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectId'>
            /// Format - uuid. The id of the project the iteration belongs to
            /// </param>
            /// <param name='iterationId'>
            /// Format - uuid. The id of the iteration to get
            /// </param>
            /// <param name='customHeaders'>
            /// Headers that will be added to request.
            /// </param>
            public static HttpOperationResponse<Iteration> FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneThreeThreeWithHttpMessages(this ITrainingApi operations, string projectId, string iterationId, Dictionary<string, List<string>> customHeaders = null)
            {
                return operations.FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneThreeThreeWithHttpMessagesAsync(projectId, iterationId, customHeaders, CancellationToken.None).ConfigureAwait(false).GetAwaiter().GetResult();
            }

            /// <summary>
            /// UpdateIteration
            /// </summary>
            /// <remarks>
            /// Update a specific iteration
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectId'>
            /// Format - uuid. Project id
            /// </param>
            /// <param name='iterationId'>
            /// Format - uuid. Iteration id
            /// </param>
            /// <param name='iteration'>
            /// The updated iteration model
            /// </param>
            public static Iteration FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneThreeFive(this ITrainingApi operations, string projectId, string iterationId, Iteration iteration = default(Iteration))
            {
                return operations.FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneThreeFiveAsync(projectId, iterationId, iteration).GetAwaiter().GetResult();
            }

            /// <summary>
            /// UpdateIteration
            /// </summary>
            /// <remarks>
            /// Update a specific iteration
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectId'>
            /// Format - uuid. Project id
            /// </param>
            /// <param name='iterationId'>
            /// Format - uuid. Iteration id
            /// </param>
            /// <param name='iteration'>
            /// The updated iteration model
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iteration> FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneThreeFiveAsync(this ITrainingApi operations, string projectId, string iterationId, Iteration iteration = default(Iteration), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneThreeFiveWithHttpMessagesAsync(projectId, iterationId, iteration, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// UpdateIteration
            /// </summary>
            /// <remarks>
            /// Update a specific iteration
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectId'>
            /// Format - uuid. Project id
            /// </param>
            /// <param name='iterationId'>
            /// Format - uuid. Iteration id
            /// </param>
            /// <param name='iteration'>
            /// The updated iteration model
            /// </param>
            /// <param name='customHeaders'>
            /// Headers that will be added to request.
            /// </param>
            public static HttpOperationResponse<Iteration> FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneThreeFiveWithHttpMessages(this ITrainingApi operations, string projectId, string iterationId, Iteration iteration = default(Iteration), Dictionary<string, List<string>> customHeaders = null)
            {
                return operations.FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneThreeFiveWithHttpMessagesAsync(projectId, iterationId, iteration, customHeaders, CancellationToken.None).ConfigureAwait(false).GetAwaiter().GetResult();
            }

            /// <summary>
            /// DeletePrediction
            /// </summary>
            /// <remarks>
            /// Delete a set of predicted images and their associated prediction results
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectId'>
            /// Format - uuid. The project id
            /// </param>
            /// <param name='ids'>
            /// The prediction ids. Limited to 64
            /// </param>
            public static void FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneTwoNine(this ITrainingApi operations, string projectId, string ids)
            {
                operations.FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneTwoNineAsync(projectId, ids).GetAwaiter().GetResult();
            }

            /// <summary>
            /// DeletePrediction
            /// </summary>
            /// <remarks>
            /// Delete a set of predicted images and their associated prediction results
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectId'>
            /// Format - uuid. The project id
            /// </param>
            /// <param name='ids'>
            /// The prediction ids. Limited to 64
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneTwoNineAsync(this ITrainingApi operations, string projectId, string ids, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneTwoNineWithHttpMessagesAsync(projectId, ids, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// DeletePrediction
            /// </summary>
            /// <remarks>
            /// Delete a set of predicted images and their associated prediction results
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectId'>
            /// Format - uuid. The project id
            /// </param>
            /// <param name='ids'>
            /// The prediction ids. Limited to 64
            /// </param>
            /// <param name='customHeaders'>
            /// Headers that will be added to request.
            /// </param>
            public static HttpOperationResponse FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneTwoNineWithHttpMessages(this ITrainingApi operations, string projectId, string ids, Dictionary<string, List<string>> customHeaders = null)
            {
                return operations.FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneTwoNineWithHttpMessagesAsync(projectId, ids, customHeaders, CancellationToken.None).ConfigureAwait(false).GetAwaiter().GetResult();
            }

            /// <summary>
            /// DeleteProject
            /// </summary>
            /// <remarks>
            /// Delete a specific project
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectId'>
            /// Format - uuid. The project id
            /// </param>
            public static void FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneTwof(this ITrainingApi operations, string projectId)
            {
                operations.FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneTwofAsync(projectId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// DeleteProject
            /// </summary>
            /// <remarks>
            /// Delete a specific project
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectId'>
            /// Format - uuid. The project id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneTwofAsync(this ITrainingApi operations, string projectId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneTwofWithHttpMessagesAsync(projectId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// DeleteProject
            /// </summary>
            /// <remarks>
            /// Delete a specific project
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectId'>
            /// Format - uuid. The project id
            /// </param>
            /// <param name='customHeaders'>
            /// Headers that will be added to request.
            /// </param>
            public static HttpOperationResponse FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneTwofWithHttpMessages(this ITrainingApi operations, string projectId, Dictionary<string, List<string>> customHeaders = null)
            {
                return operations.FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneTwofWithHttpMessagesAsync(projectId, customHeaders, CancellationToken.None).ConfigureAwait(false).GetAwaiter().GetResult();
            }

            /// <summary>
            /// GetProject
            /// </summary>
            /// <remarks>
            /// Get a specific project
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectId'>
            /// Format - uuid. The id of the project to get
            /// </param>
            public static Project FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneTwoe(this ITrainingApi operations, string projectId)
            {
                return operations.FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneTwoeAsync(projectId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// GetProject
            /// </summary>
            /// <remarks>
            /// Get a specific project
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectId'>
            /// Format - uuid. The id of the project to get
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Project> FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneTwoeAsync(this ITrainingApi operations, string projectId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneTwoeWithHttpMessagesAsync(projectId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// GetProject
            /// </summary>
            /// <remarks>
            /// Get a specific project
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectId'>
            /// Format - uuid. The id of the project to get
            /// </param>
            /// <param name='customHeaders'>
            /// Headers that will be added to request.
            /// </param>
            public static HttpOperationResponse<Project> FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneTwoeWithHttpMessages(this ITrainingApi operations, string projectId, Dictionary<string, List<string>> customHeaders = null)
            {
                return operations.FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneTwoeWithHttpMessagesAsync(projectId, customHeaders, CancellationToken.None).ConfigureAwait(false).GetAwaiter().GetResult();
            }

            /// <summary>
            /// UpdateProject
            /// </summary>
            /// <remarks>
            /// Update a specific project
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectId'>
            /// Format - uuid. The id of the project to update
            /// </param>
            /// <param name='project'>
            /// The updated project model
            /// </param>
            public static Project FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneThreeZero(this ITrainingApi operations, string projectId, Project project = default(Project))
            {
                return operations.FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneThreeZeroAsync(projectId, project).GetAwaiter().GetResult();
            }

            /// <summary>
            /// UpdateProject
            /// </summary>
            /// <remarks>
            /// Update a specific project
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectId'>
            /// Format - uuid. The id of the project to update
            /// </param>
            /// <param name='project'>
            /// The updated project model
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Project> FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneThreeZeroAsync(this ITrainingApi operations, string projectId, Project project = default(Project), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneThreeZeroWithHttpMessagesAsync(projectId, project, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// UpdateProject
            /// </summary>
            /// <remarks>
            /// Update a specific project
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectId'>
            /// Format - uuid. The id of the project to update
            /// </param>
            /// <param name='project'>
            /// The updated project model
            /// </param>
            /// <param name='customHeaders'>
            /// Headers that will be added to request.
            /// </param>
            public static HttpOperationResponse<Project> FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneThreeZeroWithHttpMessages(this ITrainingApi operations, string projectId, Project project = default(Project), Dictionary<string, List<string>> customHeaders = null)
            {
                return operations.FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneThreeZeroWithHttpMessagesAsync(projectId, project, customHeaders, CancellationToken.None).ConfigureAwait(false).GetAwaiter().GetResult();
            }

            /// <summary>
            /// DeleteTag
            /// </summary>
            /// <remarks>
            /// Delete a tag from the project
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectId'>
            /// Format - uuid. The project id
            /// </param>
            /// <param name='tagId'>
            /// Format - uuid. Id of the tag to be deleted
            /// </param>
            public static void FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneThreec(this ITrainingApi operations, string projectId, string tagId)
            {
                operations.FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneThreecAsync(projectId, tagId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// DeleteTag
            /// </summary>
            /// <remarks>
            /// Delete a tag from the project
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectId'>
            /// Format - uuid. The project id
            /// </param>
            /// <param name='tagId'>
            /// Format - uuid. Id of the tag to be deleted
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneThreecAsync(this ITrainingApi operations, string projectId, string tagId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneThreecWithHttpMessagesAsync(projectId, tagId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// DeleteTag
            /// </summary>
            /// <remarks>
            /// Delete a tag from the project
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectId'>
            /// Format - uuid. The project id
            /// </param>
            /// <param name='tagId'>
            /// Format - uuid. Id of the tag to be deleted
            /// </param>
            /// <param name='customHeaders'>
            /// Headers that will be added to request.
            /// </param>
            public static HttpOperationResponse FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneThreecWithHttpMessages(this ITrainingApi operations, string projectId, string tagId, Dictionary<string, List<string>> customHeaders = null)
            {
                return operations.FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneThreecWithHttpMessagesAsync(projectId, tagId, customHeaders, CancellationToken.None).ConfigureAwait(false).GetAwaiter().GetResult();
            }

            /// <summary>
            /// GetTag
            /// </summary>
            /// <remarks>
            /// Get information about a specific tag
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectId'>
            /// Format - uuid. The project this tag belongs to
            /// </param>
            /// <param name='tagId'>
            /// Format - uuid. The tag id
            /// </param>
            /// <param name='iterationId'>
            /// Format - uuid. The iteration to retrieve this tag from. Optional, defaults
            /// to current training set
            /// </param>
            public static Tag FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneThreeb(this ITrainingApi operations, string projectId, string tagId, string iterationId = default(string))
            {
                return operations.FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneThreebAsync(projectId, tagId, iterationId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// GetTag
            /// </summary>
            /// <remarks>
            /// Get information about a specific tag
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectId'>
            /// Format - uuid. The project this tag belongs to
            /// </param>
            /// <param name='tagId'>
            /// Format - uuid. The tag id
            /// </param>
            /// <param name='iterationId'>
            /// Format - uuid. The iteration to retrieve this tag from. Optional, defaults
            /// to current training set
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Tag> FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneThreebAsync(this ITrainingApi operations, string projectId, string tagId, string iterationId = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneThreebWithHttpMessagesAsync(projectId, tagId, iterationId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// GetTag
            /// </summary>
            /// <remarks>
            /// Get information about a specific tag
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectId'>
            /// Format - uuid. The project this tag belongs to
            /// </param>
            /// <param name='tagId'>
            /// Format - uuid. The tag id
            /// </param>
            /// <param name='iterationId'>
            /// Format - uuid. The iteration to retrieve this tag from. Optional, defaults
            /// to current training set
            /// </param>
            /// <param name='customHeaders'>
            /// Headers that will be added to request.
            /// </param>
            public static HttpOperationResponse<Tag> FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneThreebWithHttpMessages(this ITrainingApi operations, string projectId, string tagId, string iterationId = default(string), Dictionary<string, List<string>> customHeaders = null)
            {
                return operations.FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneThreebWithHttpMessagesAsync(projectId, tagId, iterationId, customHeaders, CancellationToken.None).ConfigureAwait(false).GetAwaiter().GetResult();
            }

            /// <summary>
            /// UpdateTag
            /// </summary>
            /// <remarks>
            /// Update a tag
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectId'>
            /// Format - uuid. The project id
            /// </param>
            /// <param name='tagId'>
            /// Format - uuid. The id of the target tag
            /// </param>
            /// <param name='tag'>
            /// The updated tag model
            /// </param>
            public static Tag FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneThreed(this ITrainingApi operations, string projectId, string tagId, Tag tag = default(Tag))
            {
                return operations.FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneThreedAsync(projectId, tagId, tag).GetAwaiter().GetResult();
            }

            /// <summary>
            /// UpdateTag
            /// </summary>
            /// <remarks>
            /// Update a tag
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectId'>
            /// Format - uuid. The project id
            /// </param>
            /// <param name='tagId'>
            /// Format - uuid. The id of the target tag
            /// </param>
            /// <param name='tag'>
            /// The updated tag model
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Tag> FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneThreedAsync(this ITrainingApi operations, string projectId, string tagId, Tag tag = default(Tag), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneThreedWithHttpMessagesAsync(projectId, tagId, tag, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// UpdateTag
            /// </summary>
            /// <remarks>
            /// Update a tag
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectId'>
            /// Format - uuid. The project id
            /// </param>
            /// <param name='tagId'>
            /// Format - uuid. The id of the target tag
            /// </param>
            /// <param name='tag'>
            /// The updated tag model
            /// </param>
            /// <param name='customHeaders'>
            /// Headers that will be added to request.
            /// </param>
            public static HttpOperationResponse<Tag> FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneThreedWithHttpMessages(this ITrainingApi operations, string projectId, string tagId, Tag tag = default(Tag), Dictionary<string, List<string>> customHeaders = null)
            {
                return operations.FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneThreedWithHttpMessagesAsync(projectId, tagId, tag, customHeaders, CancellationToken.None).ConfigureAwait(false).GetAwaiter().GetResult();
            }

            /// <summary>
            /// ExportIteration
            /// </summary>
            /// <remarks>
            /// Export a trained iteration
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectId'>
            /// Format - uuid. The project id
            /// </param>
            /// <param name='iterationId'>
            /// Format - uuid. The iteration id
            /// </param>
            /// <param name='platform'>
            /// The target platform (coreml or tensorflow)
            /// </param>
            public static Export FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneThreeEight(this ITrainingApi operations, string projectId, string iterationId, string platform)
            {
                return operations.FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneThreeEightAsync(projectId, iterationId, platform).GetAwaiter().GetResult();
            }

            /// <summary>
            /// ExportIteration
            /// </summary>
            /// <remarks>
            /// Export a trained iteration
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectId'>
            /// Format - uuid. The project id
            /// </param>
            /// <param name='iterationId'>
            /// Format - uuid. The iteration id
            /// </param>
            /// <param name='platform'>
            /// The target platform (coreml or tensorflow)
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Export> FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneThreeEightAsync(this ITrainingApi operations, string projectId, string iterationId, string platform, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneThreeEightWithHttpMessagesAsync(projectId, iterationId, platform, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// ExportIteration
            /// </summary>
            /// <remarks>
            /// Export a trained iteration
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectId'>
            /// Format - uuid. The project id
            /// </param>
            /// <param name='iterationId'>
            /// Format - uuid. The iteration id
            /// </param>
            /// <param name='platform'>
            /// The target platform (coreml or tensorflow)
            /// </param>
            /// <param name='customHeaders'>
            /// Headers that will be added to request.
            /// </param>
            public static HttpOperationResponse<Export> FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneThreeEightWithHttpMessages(this ITrainingApi operations, string projectId, string iterationId, string platform, Dictionary<string, List<string>> customHeaders = null)
            {
                return operations.FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneThreeEightWithHttpMessagesAsync(projectId, iterationId, platform, customHeaders, CancellationToken.None).ConfigureAwait(false).GetAwaiter().GetResult();
            }

            /// <summary>
            /// GetExports
            /// </summary>
            /// <remarks>
            /// Get the list of exports for a specific iteration
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectId'>
            /// Format - uuid. The project id
            /// </param>
            /// <param name='iterationId'>
            /// Format - uuid. The iteration id
            /// </param>
            public static IList<Export> FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneThreeSeven(this ITrainingApi operations, string projectId, string iterationId)
            {
                return operations.FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneThreeSevenAsync(projectId, iterationId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// GetExports
            /// </summary>
            /// <remarks>
            /// Get the list of exports for a specific iteration
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectId'>
            /// Format - uuid. The project id
            /// </param>
            /// <param name='iterationId'>
            /// Format - uuid. The iteration id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<Export>> FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneThreeSevenAsync(this ITrainingApi operations, string projectId, string iterationId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneThreeSevenWithHttpMessagesAsync(projectId, iterationId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// GetExports
            /// </summary>
            /// <remarks>
            /// Get the list of exports for a specific iteration
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectId'>
            /// Format - uuid. The project id
            /// </param>
            /// <param name='iterationId'>
            /// Format - uuid. The iteration id
            /// </param>
            /// <param name='customHeaders'>
            /// Headers that will be added to request.
            /// </param>
            public static HttpOperationResponse<IList<Export>> FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneThreeSevenWithHttpMessages(this ITrainingApi operations, string projectId, string iterationId, Dictionary<string, List<string>> customHeaders = null)
            {
                return operations.FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneThreeSevenWithHttpMessagesAsync(projectId, iterationId, customHeaders, CancellationToken.None).ConfigureAwait(false).GetAwaiter().GetResult();
            }

            /// <summary>
            /// GetAccountInfo
            /// </summary>
            /// <remarks>
            /// Get basic information about your account
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static Account FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneOnea(this ITrainingApi operations)
            {
                return operations.FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneOneaAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// GetAccountInfo
            /// </summary>
            /// <remarks>
            /// Get basic information about your account
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Account> FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneOneaAsync(this ITrainingApi operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneOneaWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// GetAccountInfo
            /// </summary>
            /// <remarks>
            /// Get basic information about your account
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='customHeaders'>
            /// Headers that will be added to request.
            /// </param>
            public static HttpOperationResponse<Account> FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneOneaWithHttpMessages(this ITrainingApi operations, Dictionary<string, List<string>> customHeaders = null)
            {
                return operations.FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneOneaWithHttpMessagesAsync(customHeaders, CancellationToken.None).ConfigureAwait(false).GetAwaiter().GetResult();
            }

            /// <summary>
            /// GetDomain
            /// </summary>
            /// <remarks>
            /// Get information about a specific domain
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='domainId'>
            /// Format - uuid. The id of the domain to get information about
            /// </param>
            public static Domain FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneOnec(this ITrainingApi operations, string domainId)
            {
                return operations.FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneOnecAsync(domainId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// GetDomain
            /// </summary>
            /// <remarks>
            /// Get information about a specific domain
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='domainId'>
            /// Format - uuid. The id of the domain to get information about
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Domain> FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneOnecAsync(this ITrainingApi operations, string domainId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneOnecWithHttpMessagesAsync(domainId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// GetDomain
            /// </summary>
            /// <remarks>
            /// Get information about a specific domain
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='domainId'>
            /// Format - uuid. The id of the domain to get information about
            /// </param>
            /// <param name='customHeaders'>
            /// Headers that will be added to request.
            /// </param>
            public static HttpOperationResponse<Domain> FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneOnecWithHttpMessages(this ITrainingApi operations, string domainId, Dictionary<string, List<string>> customHeaders = null)
            {
                return operations.FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneOnecWithHttpMessagesAsync(domainId, customHeaders, CancellationToken.None).ConfigureAwait(false).GetAwaiter().GetResult();
            }

            /// <summary>
            /// GetDomains
            /// </summary>
            /// <remarks>
            /// Get a list of the available domains
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<Domain> FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneOneb(this ITrainingApi operations)
            {
                return operations.FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneOnebAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// GetDomains
            /// </summary>
            /// <remarks>
            /// Get a list of the available domains
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<Domain>> FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneOnebAsync(this ITrainingApi operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneOnebWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// GetDomains
            /// </summary>
            /// <remarks>
            /// Get a list of the available domains
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='customHeaders'>
            /// Headers that will be added to request.
            /// </param>
            public static HttpOperationResponse<IList<Domain>> FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneOnebWithHttpMessages(this ITrainingApi operations, Dictionary<string, List<string>> customHeaders = null)
            {
                return operations.FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneOnebWithHttpMessagesAsync(customHeaders, CancellationToken.None).ConfigureAwait(false).GetAwaiter().GetResult();
            }

            /// <summary>
            /// GetIterationPerformance
            /// </summary>
            /// <remarks>
            /// Get detailed performance information about a trained iteration
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectId'>
            /// Format - uuid. The project id
            /// </param>
            /// <param name='iterationId'>
            /// Format - uuid. The id of the trained iteration
            /// </param>
            /// <param name='threshold'>
            /// Format - float. The 0 to 1 threshold to determine positive prediction
            /// </param>
            public static IterationPerformance FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneThreeSix(this ITrainingApi operations, string projectId, string iterationId, double threshold)
            {
                return operations.FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneThreeSixAsync(projectId, iterationId, threshold).GetAwaiter().GetResult();
            }

            /// <summary>
            /// GetIterationPerformance
            /// </summary>
            /// <remarks>
            /// Get detailed performance information about a trained iteration
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectId'>
            /// Format - uuid. The project id
            /// </param>
            /// <param name='iterationId'>
            /// Format - uuid. The id of the trained iteration
            /// </param>
            /// <param name='threshold'>
            /// Format - float. The 0 to 1 threshold to determine positive prediction
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IterationPerformance> FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneThreeSixAsync(this ITrainingApi operations, string projectId, string iterationId, double threshold, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneThreeSixWithHttpMessagesAsync(projectId, iterationId, threshold, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// GetIterationPerformance
            /// </summary>
            /// <remarks>
            /// Get detailed performance information about a trained iteration
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectId'>
            /// Format - uuid. The project id
            /// </param>
            /// <param name='iterationId'>
            /// Format - uuid. The id of the trained iteration
            /// </param>
            /// <param name='threshold'>
            /// Format - float. The 0 to 1 threshold to determine positive prediction
            /// </param>
            /// <param name='customHeaders'>
            /// Headers that will be added to request.
            /// </param>
            public static HttpOperationResponse<IterationPerformance> FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneThreeSixWithHttpMessages(this ITrainingApi operations, string projectId, string iterationId, double threshold, Dictionary<string, List<string>> customHeaders = null)
            {
                return operations.FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneThreeSixWithHttpMessagesAsync(projectId, iterationId, threshold, customHeaders, CancellationToken.None).ConfigureAwait(false).GetAwaiter().GetResult();
            }

            /// <summary>
            /// GetIterations
            /// </summary>
            /// <remarks>
            /// Get iterations for the project
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectId'>
            /// Format - uuid. The project id
            /// </param>
            public static IList<Iteration> FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneThreeTwo(this ITrainingApi operations, string projectId)
            {
                return operations.FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneThreeTwoAsync(projectId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// GetIterations
            /// </summary>
            /// <remarks>
            /// Get iterations for the project
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectId'>
            /// Format - uuid. The project id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<Iteration>> FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneThreeTwoAsync(this ITrainingApi operations, string projectId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneThreeTwoWithHttpMessagesAsync(projectId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// GetIterations
            /// </summary>
            /// <remarks>
            /// Get iterations for the project
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectId'>
            /// Format - uuid. The project id
            /// </param>
            /// <param name='customHeaders'>
            /// Headers that will be added to request.
            /// </param>
            public static HttpOperationResponse<IList<Iteration>> FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneThreeTwoWithHttpMessages(this ITrainingApi operations, string projectId, Dictionary<string, List<string>> customHeaders = null)
            {
                return operations.FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneThreeTwoWithHttpMessagesAsync(projectId, customHeaders, CancellationToken.None).ConfigureAwait(false).GetAwaiter().GetResult();
            }

            /// <summary>
            /// GetTaggedImages
            /// </summary>
            /// <remarks>
            /// This API supports batching and range selection. By default it will only
            /// return first 50 images matching images.
            /// Use the {take} and {skip} parameters to control how many images to return
            /// in a given batch.
            /// The filtering is on an and/or relationship. For example, if the provided
            /// tag ids are for the "Dog" and
            /// "Cat" tags, then only images tagged with Dog and/or Cat will be returned
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectId'>
            /// Format - uuid. The project id
            /// </param>
            /// <param name='iterationId'>
            /// Format - uuid. The iteration id. Defaults to workspace
            /// </param>
            /// <param name='tagIds'>
            /// An list of tags ids to filter the images. Defaults to all tagged images
            /// when null. Limited to 20
            /// </param>
            /// <param name='orderBy'>
            /// The ordering. Defaults to newest. Possible values include: 'Newest',
            /// 'Oldest'
            /// </param>
            /// <param name='take'>
            /// Format - int32. Maximum number of images to return. Defaults to 50, limited
            /// to 256
            /// </param>
            /// <param name='skip'>
            /// Format - int32. Number of images to skip before beginning the image batch.
            /// Defaults to 0
            /// </param>
            public static IList<Image> FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneOned(this ITrainingApi operations, string projectId, string iterationId = default(string), string tagIds = default(string), string orderBy = default(string), int? take = 50, int? skip = 0)
            {
                return operations.FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneOnedAsync(projectId, iterationId, tagIds, orderBy, take, skip).GetAwaiter().GetResult();
            }

            /// <summary>
            /// GetTaggedImages
            /// </summary>
            /// <remarks>
            /// This API supports batching and range selection. By default it will only
            /// return first 50 images matching images.
            /// Use the {take} and {skip} parameters to control how many images to return
            /// in a given batch.
            /// The filtering is on an and/or relationship. For example, if the provided
            /// tag ids are for the "Dog" and
            /// "Cat" tags, then only images tagged with Dog and/or Cat will be returned
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectId'>
            /// Format - uuid. The project id
            /// </param>
            /// <param name='iterationId'>
            /// Format - uuid. The iteration id. Defaults to workspace
            /// </param>
            /// <param name='tagIds'>
            /// An list of tags ids to filter the images. Defaults to all tagged images
            /// when null. Limited to 20
            /// </param>
            /// <param name='orderBy'>
            /// The ordering. Defaults to newest. Possible values include: 'Newest',
            /// 'Oldest'
            /// </param>
            /// <param name='take'>
            /// Format - int32. Maximum number of images to return. Defaults to 50, limited
            /// to 256
            /// </param>
            /// <param name='skip'>
            /// Format - int32. Number of images to skip before beginning the image batch.
            /// Defaults to 0
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<Image>> FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneOnedAsync(this ITrainingApi operations, string projectId, string iterationId = default(string), string tagIds = default(string), string orderBy = default(string), int? take = 50, int? skip = 0, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneOnedWithHttpMessagesAsync(projectId, iterationId, tagIds, orderBy, take, skip, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// GetTaggedImages
            /// </summary>
            /// <remarks>
            /// This API supports batching and range selection. By default it will only
            /// return first 50 images matching images.
            /// Use the {take} and {skip} parameters to control how many images to return
            /// in a given batch.
            /// The filtering is on an and/or relationship. For example, if the provided
            /// tag ids are for the "Dog" and
            /// "Cat" tags, then only images tagged with Dog and/or Cat will be returned
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectId'>
            /// Format - uuid. The project id
            /// </param>
            /// <param name='iterationId'>
            /// Format - uuid. The iteration id. Defaults to workspace
            /// </param>
            /// <param name='tagIds'>
            /// An list of tags ids to filter the images. Defaults to all tagged images
            /// when null. Limited to 20
            /// </param>
            /// <param name='orderBy'>
            /// The ordering. Defaults to newest. Possible values include: 'Newest',
            /// 'Oldest'
            /// </param>
            /// <param name='take'>
            /// Format - int32. Maximum number of images to return. Defaults to 50, limited
            /// to 256
            /// </param>
            /// <param name='skip'>
            /// Format - int32. Number of images to skip before beginning the image batch.
            /// Defaults to 0
            /// </param>
            /// <param name='customHeaders'>
            /// Headers that will be added to request.
            /// </param>
            public static HttpOperationResponse<IList<Image>> FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneOnedWithHttpMessages(this ITrainingApi operations, string projectId, string iterationId = default(string), string tagIds = default(string), string orderBy = default(string), int? take = 50, int? skip = 0, Dictionary<string, List<string>> customHeaders = null)
            {
                return operations.FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneOnedWithHttpMessagesAsync(projectId, iterationId, tagIds, orderBy, take, skip, customHeaders, CancellationToken.None).ConfigureAwait(false).GetAwaiter().GetResult();
            }

            /// <summary>
            /// GetUntaggedImages
            /// </summary>
            /// <remarks>
            /// This API supports batching and range selection. By default it will only
            /// return first 50 images matching images.
            /// Use the {take} and {skip} parameters to control how many images to return
            /// in a given batch.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectId'>
            /// Format - uuid. The project id
            /// </param>
            /// <param name='iterationId'>
            /// Format - uuid. The iteration id. Defaults to workspace
            /// </param>
            /// <param name='orderBy'>
            /// The ordering. Defaults to newest. Possible values include: 'Newest',
            /// 'Oldest'
            /// </param>
            /// <param name='take'>
            /// Format - int32. Maximum number of images to return. Defaults to 50, limited
            /// to 256
            /// </param>
            /// <param name='skip'>
            /// Format - int32. Number of images to skip before beginning the image batch.
            /// Defaults to 0
            /// </param>
            public static IList<Image> FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneOnee(this ITrainingApi operations, string projectId, string iterationId = default(string), string orderBy = default(string), int? take = 50, int? skip = 0)
            {
                return operations.FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneOneeAsync(projectId, iterationId, orderBy, take, skip).GetAwaiter().GetResult();
            }

            /// <summary>
            /// GetUntaggedImages
            /// </summary>
            /// <remarks>
            /// This API supports batching and range selection. By default it will only
            /// return first 50 images matching images.
            /// Use the {take} and {skip} parameters to control how many images to return
            /// in a given batch.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectId'>
            /// Format - uuid. The project id
            /// </param>
            /// <param name='iterationId'>
            /// Format - uuid. The iteration id. Defaults to workspace
            /// </param>
            /// <param name='orderBy'>
            /// The ordering. Defaults to newest. Possible values include: 'Newest',
            /// 'Oldest'
            /// </param>
            /// <param name='take'>
            /// Format - int32. Maximum number of images to return. Defaults to 50, limited
            /// to 256
            /// </param>
            /// <param name='skip'>
            /// Format - int32. Number of images to skip before beginning the image batch.
            /// Defaults to 0
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<Image>> FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneOneeAsync(this ITrainingApi operations, string projectId, string iterationId = default(string), string orderBy = default(string), int? take = 50, int? skip = 0, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneOneeWithHttpMessagesAsync(projectId, iterationId, orderBy, take, skip, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// GetUntaggedImages
            /// </summary>
            /// <remarks>
            /// This API supports batching and range selection. By default it will only
            /// return first 50 images matching images.
            /// Use the {take} and {skip} parameters to control how many images to return
            /// in a given batch.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectId'>
            /// Format - uuid. The project id
            /// </param>
            /// <param name='iterationId'>
            /// Format - uuid. The iteration id. Defaults to workspace
            /// </param>
            /// <param name='orderBy'>
            /// The ordering. Defaults to newest. Possible values include: 'Newest',
            /// 'Oldest'
            /// </param>
            /// <param name='take'>
            /// Format - int32. Maximum number of images to return. Defaults to 50, limited
            /// to 256
            /// </param>
            /// <param name='skip'>
            /// Format - int32. Number of images to skip before beginning the image batch.
            /// Defaults to 0
            /// </param>
            /// <param name='customHeaders'>
            /// Headers that will be added to request.
            /// </param>
            public static HttpOperationResponse<IList<Image>> FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneOneeWithHttpMessages(this ITrainingApi operations, string projectId, string iterationId = default(string), string orderBy = default(string), int? take = 50, int? skip = 0, Dictionary<string, List<string>> customHeaders = null)
            {
                return operations.FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneOneeWithHttpMessagesAsync(projectId, iterationId, orderBy, take, skip, customHeaders, CancellationToken.None).ConfigureAwait(false).GetAwaiter().GetResult();
            }

            /// <summary>
            /// QueryPredictionResults
            /// </summary>
            /// <remarks>
            /// Get images that were sent to your prediction endpoint
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectId'>
            /// Format - uuid. The project id
            /// </param>
            /// <param name='predictionQueryToken'>
            /// Parameters used to query the predictions. Limited to combining 2 tags
            /// </param>
            public static PredictionQuery FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneTwoEight(this ITrainingApi operations, string projectId, PredictionQueryToken predictionQueryToken = default(PredictionQueryToken))
            {
                return operations.FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneTwoEightAsync(projectId, predictionQueryToken).GetAwaiter().GetResult();
            }

            /// <summary>
            /// QueryPredictionResults
            /// </summary>
            /// <remarks>
            /// Get images that were sent to your prediction endpoint
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectId'>
            /// Format - uuid. The project id
            /// </param>
            /// <param name='predictionQueryToken'>
            /// Parameters used to query the predictions. Limited to combining 2 tags
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PredictionQuery> FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneTwoEightAsync(this ITrainingApi operations, string projectId, PredictionQueryToken predictionQueryToken = default(PredictionQueryToken), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneTwoEightWithHttpMessagesAsync(projectId, predictionQueryToken, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// QueryPredictionResults
            /// </summary>
            /// <remarks>
            /// Get images that were sent to your prediction endpoint
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectId'>
            /// Format - uuid. The project id
            /// </param>
            /// <param name='predictionQueryToken'>
            /// Parameters used to query the predictions. Limited to combining 2 tags
            /// </param>
            /// <param name='customHeaders'>
            /// Headers that will be added to request.
            /// </param>
            public static HttpOperationResponse<PredictionQuery> FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneTwoEightWithHttpMessages(this ITrainingApi operations, string projectId, PredictionQueryToken predictionQueryToken = default(PredictionQueryToken), Dictionary<string, List<string>> customHeaders = null)
            {
                return operations.FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneTwoEightWithHttpMessagesAsync(projectId, predictionQueryToken, customHeaders, CancellationToken.None).ConfigureAwait(false).GetAwaiter().GetResult();
            }

            /// <summary>
            /// QuickTestImage
            /// </summary>
            /// <remarks>
            /// Quick test an image
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectId'>
            /// Format - uuid. The project id
            /// </param>
            /// <param name='imageData'>
            /// </param>
            /// <param name='iterationId'>
            /// Format - uuid. Optional. Specifies the id of a particular iteration to
            /// evaluate against.
            /// The default iteration for the project will be used when not specified.
            /// </param>
            public static ImagePredictionResult FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneTwob(this ITrainingApi operations, string projectId, string imageData, string iterationId = default(string))
            {
                return operations.FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneTwobAsync(projectId, imageData, iterationId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// QuickTestImage
            /// </summary>
            /// <remarks>
            /// Quick test an image
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectId'>
            /// Format - uuid. The project id
            /// </param>
            /// <param name='imageData'>
            /// </param>
            /// <param name='iterationId'>
            /// Format - uuid. Optional. Specifies the id of a particular iteration to
            /// evaluate against.
            /// The default iteration for the project will be used when not specified.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ImagePredictionResult> FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneTwobAsync(this ITrainingApi operations, string projectId, string imageData, string iterationId = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneTwobWithHttpMessagesAsync(projectId, imageData, iterationId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// QuickTestImage
            /// </summary>
            /// <remarks>
            /// Quick test an image
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectId'>
            /// Format - uuid. The project id
            /// </param>
            /// <param name='imageData'>
            /// </param>
            /// <param name='iterationId'>
            /// Format - uuid. Optional. Specifies the id of a particular iteration to
            /// evaluate against.
            /// The default iteration for the project will be used when not specified.
            /// </param>
            /// <param name='customHeaders'>
            /// Headers that will be added to request.
            /// </param>
            public static HttpOperationResponse<ImagePredictionResult> FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneTwobWithHttpMessages(this ITrainingApi operations, string projectId, string imageData, string iterationId = default(string), Dictionary<string, List<string>> customHeaders = null)
            {
                return operations.FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneTwobWithHttpMessagesAsync(projectId, imageData, iterationId, customHeaders, CancellationToken.None).ConfigureAwait(false).GetAwaiter().GetResult();
            }

            /// <summary>
            /// QuickTestImageUrl
            /// </summary>
            /// <remarks>
            /// Quick test an image url
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectId'>
            /// Format - uuid. The project to evaluate against
            /// </param>
            /// <param name='iterationId'>
            /// Format - uuid. Optional. Specifies the id of a particular iteration to
            /// evaluate against.
            /// The default iteration for the project will be used when not specified.
            /// </param>
            /// <param name='imageUrl'>
            /// An {Iris.Web.Api.Models.ImageUrl} that contains the url of the image to be
            /// evaluated
            /// </param>
            public static ImagePredictionResult FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneTwoa(this ITrainingApi operations, string projectId, string iterationId = default(string), ImageUrl imageUrl = default(ImageUrl))
            {
                return operations.FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneTwoaAsync(projectId, iterationId, imageUrl).GetAwaiter().GetResult();
            }

            /// <summary>
            /// QuickTestImageUrl
            /// </summary>
            /// <remarks>
            /// Quick test an image url
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectId'>
            /// Format - uuid. The project to evaluate against
            /// </param>
            /// <param name='iterationId'>
            /// Format - uuid. Optional. Specifies the id of a particular iteration to
            /// evaluate against.
            /// The default iteration for the project will be used when not specified.
            /// </param>
            /// <param name='imageUrl'>
            /// An {Iris.Web.Api.Models.ImageUrl} that contains the url of the image to be
            /// evaluated
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ImagePredictionResult> FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneTwoaAsync(this ITrainingApi operations, string projectId, string iterationId = default(string), ImageUrl imageUrl = default(ImageUrl), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneTwoaWithHttpMessagesAsync(projectId, iterationId, imageUrl, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// QuickTestImageUrl
            /// </summary>
            /// <remarks>
            /// Quick test an image url
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectId'>
            /// Format - uuid. The project to evaluate against
            /// </param>
            /// <param name='iterationId'>
            /// Format - uuid. Optional. Specifies the id of a particular iteration to
            /// evaluate against.
            /// The default iteration for the project will be used when not specified.
            /// </param>
            /// <param name='imageUrl'>
            /// An {Iris.Web.Api.Models.ImageUrl} that contains the url of the image to be
            /// evaluated
            /// </param>
            /// <param name='customHeaders'>
            /// Headers that will be added to request.
            /// </param>
            public static HttpOperationResponse<ImagePredictionResult> FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneTwoaWithHttpMessages(this ITrainingApi operations, string projectId, string iterationId = default(string), ImageUrl imageUrl = default(ImageUrl), Dictionary<string, List<string>> customHeaders = null)
            {
                return operations.FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneTwoaWithHttpMessagesAsync(projectId, iterationId, imageUrl, customHeaders, CancellationToken.None).ConfigureAwait(false).GetAwaiter().GetResult();
            }

            /// <summary>
            /// TrainProject
            /// </summary>
            /// <remarks>
            /// Queues project for training
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectId'>
            /// Format - uuid. The project id
            /// </param>
            public static Iteration FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneThreeOne(this ITrainingApi operations, string projectId)
            {
                return operations.FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneThreeOneAsync(projectId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// TrainProject
            /// </summary>
            /// <remarks>
            /// Queues project for training
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectId'>
            /// Format - uuid. The project id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iteration> FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneThreeOneAsync(this ITrainingApi operations, string projectId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneThreeOneWithHttpMessagesAsync(projectId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// TrainProject
            /// </summary>
            /// <remarks>
            /// Queues project for training
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectId'>
            /// Format - uuid. The project id
            /// </param>
            /// <param name='customHeaders'>
            /// Headers that will be added to request.
            /// </param>
            public static HttpOperationResponse<Iteration> FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneThreeOneWithHttpMessages(this ITrainingApi operations, string projectId, Dictionary<string, List<string>> customHeaders = null)
            {
                return operations.FiveaThreeZeroFourFoureeZeroEightfaFiveeZeroSixbEightNineZerofOneThreeOneWithHttpMessagesAsync(projectId, customHeaders, CancellationToken.None).ConfigureAwait(false).GetAwaiter().GetResult();
            }

    }
}
